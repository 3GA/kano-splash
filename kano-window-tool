#!/usr/bin/env python

# kano-windonw-tool - Manipulate window properties
# Copyright (C) 2013 Radek Pazdera, Kano Computing Ltd.

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

import time
import sys

from gtk import gdk
from argparse import ArgumentParser

BOTTOM_BAR_HEIGHT = 39

def parse_args():
    app_desc="A tool for manipulating window parameters and properties."
    parser = ArgumentParser(add_help=False, description=app_desc)

    parser.add_argument("--help", action="help",
                        help="show this message and exit")

    id_group = parser.add_mutually_exclusive_group(required=True)
    id_group.add_argument("-p", "--pid",
                          help="process id as an identifier of the window")
    id_group.add_argument("-t", "--title",
                          help="window title as an identifier of the window")
    id_group.add_argument("-i", "--id",
                          help="wm id as an identifier of the window")

    parser.add_argument("-w", "--width", type=float, metavar="W",
                        help="set specific width")
    parser.add_argument("-h", "--height", type=float, metavar="H",
                        help="set specific height")
    parser.add_argument("-x", "--x-pos", metavar="X", type=float,
                        help="set X position of the window")
    parser.add_argument("-y", "--y-pos", metavar="Y", type=float,
                        help="set Y position of the window")

    mode_group = parser.add_mutually_exclusive_group()
    mode_group.add_argument("-c", "--centered", action="store_true",
                            help="launch the window centered")
    mode_group.add_argument("-m", "--maximized", action="store_true",
                            help="launch the window maximized")

    parser.add_argument("-d", "--decoration", metavar="yes|no",
                        help="enable/disable window decoration")
    parser.add_argument("-f", "--focus", action="store_true",
                        help="set keyboard focus to the window")

    return parser.parse_args()

def get_window_by_pid(pid):
    root = gdk.get_default_root_window()
    for id in root.property_get('_NET_CLIENT_LIST')[2]:
        w = gdk.window_foreign_new(id)
        if w and pid in w.property_get("_NET_WM_PID")[2]:
            return w

def get_window_by_title(title):
    root = gdk.get_default_root_window()
    for id in root.property_get('_NET_CLIENT_LIST')[2]:
        w = gdk.window_foreign_new(id)
        if w and title == w.property_get("WM_NAME")[2]:
            return w

def get_window_by_id(wid):
    if wid[0:2] == "0x":
        wid = int(wid, 16)
    return gdk.window_foreign_new(int(wid))

# Find the window to be manipulated. Gives up after 30 seconds.
def find_window(title, pid, wid):
    win = None
    for i in range(1, 300):
        if title != None:
            win = get_window_by_title(title)
        elif pid != None:
            win = get_window_by_pid(pid)
        else:
            win = get_window_by_id(wid)

        if win != None:
            break
        time.sleep(0.1)
    return win

# Extremly hackish, but the most reliable way of determining
# whether the window is decorated by the window manager
def is_decorated(win):
    extents = win.property_get("_NET_FRAME_EXTENTS")[2]
    return sum(extents) > 0

# Returns a 2-tuple (width, height) that is used for decoration
def get_decoration_size(win):
    extents = win.property_get("_NET_FRAME_EXTENTS")[2]
    return (extents[0] + extents[1], extents[2] + extents[3])

def finalize(retval):
    gdk.window_process_all_updates()
    gdk.flush()
    return retval

def main():
    args = parse_args()

    win = find_window(args.title, args.pid, args.id)
    if win == None:
        sys.stderr.write("No window found from the information you provided.\n")
        return 1

    if args.focus:
        win.raise_()
        win.focus()

    # Screen dimensions
    scr_width = gdk.screen_width()
    scr_height = gdk.screen_height() - BOTTOM_BAR_HEIGHT

    # Window dimensions and position
    x, y = win.get_root_origin()
    width, height = win.get_geometry()[2:4]

    # Sort out the decorations
    if args.decoration != None:
        if args.decoration == "no":
            # Resize if the window was decorated before
            if is_decorated(win):
                dw, dh = get_decoration_size(win)
                width += dw
                height += dh

                win.set_decorations(0)
                gdk.flush()
        else:
            # Resize if the window was not decorated before
            if not is_decorated(win):
                win.set_decorations(1)
                gdk.flush()

                dw, dh = get_decoration_size(win)
                width -= dw
                height -= dh

    # Resizing is irrelevant when maximizing, so just exit afterwards
    if args.maximized:
        win.maximize()
        return finalize(0)

    # Initialize the target values
    new_x, new_y, new_width, new_height = x, y, width, height

    # Window position
    if args.x_pos != None:
        if args.x_pos <= 1:
            new_x = scr_width * args.x_pos
        else:
            new_x = args.x_pos

    if args.y_pos != None:
        if args.y_pos <= 1:
            new_y = scr_height * args.y_pos
        else:
            new_y = args.y_pos

    # Window dimensions
    if args.width != None:
        if args.width <= 1:
            new_width = scr_width * args.width
        else:
            new_width = args.width
        new_width -= get_decoration_size(win)[0]

    if args.height != None:
        if args.height <= 1:
            new_height = scr_height * args.height
        else:
            new_height = args.height
        new_height -= get_decoration_size(win)[1]

    # Should the window be centered?
    if args.centered:
        new_x = (scr_width - new_width) / 2
        new_y = (scr_height - new_height) / 2

    # Do all the resizing at once
    win.move_resize(int(new_x), int(new_y), int(new_width), int(new_height))

    return finalize(0)

if __name__ == "__main__":
    sys.exit(main())

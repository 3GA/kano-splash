#!/usr/bin/env python

# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#

# usage: kano-dialog title=title description=desc buttons=abc:orange:1,bcd:red:2

import os
import sys
from gi.repository import Gtk

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano.gtk3.kano_dialog import KanoDialog, button_defaults


radio_returnvalue = None


def parse_items(args):
    global radio_returnvalue

    widget = None
    title = ""
    description = ""
    has_entry = False
    has_list = False
    buttons = {}

    for arg in args:
        split = arg.split('=')

        if split[0] == "button":
            button_options = {}
            button_values = split[1].split(',')
            button_name = button_values[0]
            buttons[button_name] = button_options
            for name, default in button_defaults.iteritems():
                for value in button_values:
                    if name in value:
                        pair = value.split(':')
                        button_options[pair[0]] = pair[1]

        if split[0] == "buttons":
            buttons_arg = split[1].split(',')
            for button_arg in buttons_arg:
                name, color, rc = button_arg.split(':')
                buttons[name] = {
                    'color': color,
                    'return_value': rc,
                }

        if split[0] == "radiolist":
            widget = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
            has_list = True
            radio_list = split[1].split(",")
            radio = Gtk.RadioButton.new_with_label_from_widget(None, radio_list[0])
            radio.connect("toggled", on_button_toggled)
            radio_returnvalue = radio_list[0]
            widget.pack_start(radio, False, False, 5)
            for i in radio_list[1:]:
                r = Gtk.RadioButton.new_with_label_from_widget(radio, i)
                r.connect("toggled", on_button_toggled)
                widget.pack_start(r, False, False, 5)

        elif split[0] == "entry":
            widget = Gtk.Entry()
            has_entry = True
            if len(split) == 2 and split[1] == "hidden":
                widget.set_visibility(False)

        if split[0] == 'title':
            title = split[1]

        if split[0] == 'description':
            description = split[1]

    return title, description, buttons, widget, has_entry, has_list


def on_button_toggled(button):
    global radio_returnvalue

    if button.get_active():
        label = button.get_label()
        radio_returnvalue = label


def main():
    text = sys.argv[1:]
    title, description, buttons, custom_widget, entry_bool, list_bool = parse_items(text)
    kdialog = KanoDialog(
        title_text=title,
        description_text=description,
        button_dict=buttons,
        widget=custom_widget,
        has_entry=entry_bool,
        has_list=list_bool)
    response = kdialog.run()
    # These lines mean we can read the return value in bash
    print >> sys.stderr
    print response


if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.exit('Nothing to display!')
    main()

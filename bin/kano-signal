#!/usr/bin/env python

# kano-signal
#
# Copyright (C) 2014-2016 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Sends a signal to a Kano app (save, load, share, make, launch-share)
#
# This script is invoked by the Kano Keyboard hotkeys (xbindkeys in Kano Desktop).
# If you call it from a shell or command line, make sure you export DISPLAY
# to point to your desktop.
#
# It is also invoked from Kano World when launching a Share.
# The chromium hook connected to kano-profile.apps module,
# calls this script with "launch-share <xml_filename>",
# which will open a share on the currently running app by sending a signal.
#
# Exit code 0 means the signal could be delivered, any other value means error,
# in which case you should launch the app.

# NB this has been converted line by line from bash. Needs cleanup
#
import sys
import os
import stat

# pipe name to send javascript code
pipe_name = "/tmp/webapp.pipe"
app = None

# CLEANUP: should make argument parsing nicer
# signal name
try:
    signal = sys.argv[1]
except:
    signal = ""

# "launch-share" signal name needs this extra parameter
try:
    xml_filename = sys.argv[2]
except:
    xml_filename = ""


# syntax sanity check
if signal == "save":
    jscmd = "Signal.save()"
elif signal == "load":
    jscmd = "Signal.load()"
elif signal == "share":
    jscmd = "Signal.share()"
elif signal == "make":
    jscmd = "Signal.make()"
elif signal == "launch-share":
    # dbus doesn't like '-' so we use '_'
    signal = "launch_share"
    # Make sure the share creation was downloaded
    if not os.path.exists(xml_filename):
        print "Please specify a valid xml file to 'launch-share' : {}".format(xml_filename)
        exit(1)

        # Command to open a share on top of your current workspace
    jscmd = "Signal.load(\"{}\")".format(xml_filename)
else:
    print "Usage: make-signal < save | load | share | make | launch-share <xml_filename> >"
    exit(1)


def is_running(cmd):
    rc = os.system('xwininfo -tree -root | grep -i "{}" > /dev/null 2>&1'.format(cmd))
    return rc == 0


# TODO: We need to cover the rest of Kano apps (see kano-profile/rules)
for APP in ["make-pong", "make-minecraft", "make-music"]:
    if is_running(APP):
        app = APP
        if app == "make-music":
            # Make Music is registered as "sonicpi" in dbus
            app = "sonicpi"

        break

if app is None:
    # No valid app is running
    print "no valid app is running, returning error"
    exit(1)


# if there is no pipe, webkit is not running
fifo_exists = False
try:
    if stat.S_ISFIFO(os.stat(pipe_name).st_mode):
        fifo_exists = True
except:
    # ignore exception when fifo does not exist
    pass

if fifo_exists:
    pipe = open(pipe_name, "w")
    # Minecraft and Pong, because webkit is running.
    print >> pipe, jscmd
    pipe.close()

    # Since this is a signal from another app (most times Kano World),
    # switch user focus back to the game app.
    if app == "make-minecraft":
        rc = os.system('wmctrl -a "Make Minecraft"')

    if app == "make-pong":
        rc = os.system('wmctrl -a "Make Pong"')

else:
    # Pass on event to dbus
    def do_send_dbus(app, signal, xml_filename=None):
        import dbus
        session_bus = dbus.SessionBus()
        proxy = session_bus.get_object("me.kano.{}".format(app), "/me/kano/{}".format(app))
        sig = proxy.get_dbus_method(signal, dbus_interface="me.kano.{}.Actions".format(app))
        if xml_filename:
            sig(xml_filename)
        else:
            sig()


    # In the case of launch-share, we send the xml file as an extra string parameter on the signal
    if signal == "launch_share":
        do_send_dbus(app, signal, xml_filename)
    else:
        do_send_dbus(app, signal)

    # TODO: Apps should implement gaining focus when such signal is sent


exit(0)
